# soap code taken from http://mattscodecave.com/posts/using-python-and-upnp-to-forward-a-port.html

from xml.dom import minidom
import httplib

def fetchGch(ip):
  conn = httplib.HTTPConnection(ip, 80)
  conn.request("GET", "/ajaxQueryDevice.gch")
  resp = conn.getresponse()
  return resp.read()

def parseGch(gch):
  xmldoc = minidom.parseString(gch)
  parameters = xmldoc.getElementsByTagName('Parameters')

  nodes = []

  for parameter in parameters:
    node = {}
    for child in parameter.childNodes:
      if len(child.childNodes) > 0:
        node[str(child.tagName)] = str(child.childNodes[0].data)
      else:
        node[str(child.tagName)] = None
    nodes.append(node)
  return nodes

def parseMapping(mapping):

  xmldoc = minidom.parseString(mapping)
  parameters = xmldoc.getElementsByTagName('u:GetGenericPortMappingEntryResponse')

  node = {}

  for parameter in parameters:
    for child in parameter.childNodes:
      if child.nodeType == 1: # Element
        if child.firstChild is not None:
          node[str(child.nodeName)] = str(child.firstChild.data)
  return node

def getXML(schemaType, serviceType, actionName, arguments):
  doc = minidom.Document()

  # create the envelope element and set its attributes
  envelope = doc.createElementNS('', 's:Envelope')
  envelope.setAttribute('xmlns:s', 'http://schemas.xmlsoap.org/soap/envelope/')
  envelope.setAttribute('s:encodingStyle', 'http://schemas.xmlsoap.org/soap/encoding/')

  # create the body element
  body = doc.createElementNS('', 's:Body')

  # create the function element and set its attribute
  fn = doc.createElementNS('', 'u:' + actionName)
  fn.setAttribute('xmlns:u', 'urn:' + schemaType + ':service:' + serviceType + ':1')

  # container for created nodes
  argument_list = []

  # iterate over arguments, create nodes, create text nodes,
  # append text nodes to nodes, and finally add the ready product
  # to argument_list
  for k, v in arguments:
    tmp_node = doc.createElement(k)
    tmp_text_node = doc.createTextNode(v)
    tmp_node.appendChild(tmp_text_node)
    argument_list.append(tmp_node)

  # append the prepared argument nodes to the function element
  for arg in argument_list:
    fn.appendChild(arg)

  # append function element to the body element
  body.appendChild(fn)

  # append body element to envelope element
  envelope.appendChild(body)

  # append envelope element to document, making it the root element
  doc.appendChild(envelope)

  # our tree is ready, convert it to a string
  return doc.toxml()

def sendRequest(ip, port, path, xml, dic):
  conn = httplib.HTTPConnection(ip, port)
  conn.request('POST', path, xml, dic)
  # wait for a response
  resp = conn.getresponse()
  return {'success':resp.status == 200, 'response':resp.read()}

def addPortMapping(ip, port, internal_ip, internal_port, external_port):
  return sendRequest(ip, port,
                     '/upnp/control/WANIPConn1',
                     getXML('schemas-upnp-org', 'WANIPConnection', 'AddPortMapping',
                            [('NewExternalPort',           external_port), # specify port on router
                             ('NewProtocol',               'TCP'),         # specify protocol (UDP/TCP)
                             ('NewInternalPort',           internal_port), # specify port on internal host
                             ('NewInternalClient',         internal_ip),   # specify IP of internal host
                             ('NewEnabled',                '1'),           # turn mapping ON
                             ('NewPortMappingDescription', ''),            # blank description
                             ('NewLeaseDuration',          '0')]           # how long should it be opened?
                     ),
                     { 'SOAPAction':   '"urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping"',
                       'Content-Type': 'text/xml'})

def deletePortMapping(ip, port, internal_ip, external_port, protocol):
  return sendRequest(ip, port,
                     '/upnp/control/WANIPConn1',
                     getXML('schemas-upnp-org', 'WANIPConnection', 'DeletePortMapping',
                            [('NewRemoteHost',       internal_ip),
                             ('NewExternalPort',     external_port),
                             ('NewProtocol',         protocol)]
                     ),
                     { 'SOAPAction':   '"urn:schemas-upnp-org:service:WANIPConnection:1#DeletePortMapping"',
                       'Content-Type': 'text/xml'})

def getConnectionStatus(ip, port):
  return sendRequest(ip, port,
                     '/upnp/control/WANIPConn1',
                     getXML('schemas-upnp-org', 'WANIPConnection', 'GetStatusInfo', []),
                     {'SOAPAction': '"urn:schemas-upnp-org:service:WANIPConnection:1#GetStatusInfo"',
                      'Content-Type': 'text/xml'})

def getGenericPortMappingEntry(ip,port, index):
  return sendRequest(ip, port,
                     '/upnp/control/WANIPConn1',
                     getXML('schemas-upnp-org', 'WANIPConnection', 'GetGenericPortMappingEntry', [("NewPortMappingIndex", str(index))]),
                     {'SOAPAction': '"urn:schemas-upnp-org:service:WANIPConnection:1#GetGenericPortMappingEntry"',
                      'Content-Type': 'text/xml'})

def magicOn(ip,port):
  return sendRequest(ip, port,
                     '/control/igd/lancs', getXML('dslforum-org', 'LANConfigSecurity', 'SetConfigPassword', [("NewPassword", "test")]), 
                     {'SOAPAction': '"urn:dslforum-org:service:LANConfigSecurity:1#SetConfigPassword"',
                      'Content-Type': 'text/xml'})

def getExistingMappings(ip, port):
  mappings = []
  i = 0
  while True:
    resp = getGenericPortMappingEntry(ip, port, i)
    if resp["success"]:
      mapping = resp["response"]
      mappings.append(parseMapping(mapping))
      i += 1
    else:
      break

  return mappings

#############

def printMappings(mappings):
  print "ID\tIP      \tIntPort\tExtPort\tProtocol"
  for i in range(0, len(mappings)):
    print str(i) + "\t" + mappings[i]["NewInternalClient"] + "\t" + mappings[i]["NewInternalPort"] + "\t" + mappings[i]["NewExternalPort"] + "\t" + mappings[i]["NewProtocol"]

def printNodes(nodes):
  for i in range(0, len(nodes)):
    print str(i) + ") " + nodes[i]["IPAddress"] + "(" + str(nodes[i]["HostName"]) + ")"

## defaults
port = 52869

#print magicOn("192.168.1.1", port)
print deletePortMapping("192.168.1.1", port, "192.168.1.101", "10081", "TCP")


## main loop
res = raw_input("Enter IP (192.168.1.1): ")
ip = "192.168.1.1" if res == "" else res
try:
  while True:
    print "===================================="
    print "1. View / Delete Existing Mappings"
    print "2. Add New Mapping"
    print "===================================="
    opt = raw_input("Choose an option: ")
    if opt == "1":
      mappings = getExistingMappings(ip, port)
      if len(mappings) > 0:
        printMappings(mappings)
        res = raw_input("Choose a mapping to delete or hit Enter to go back: ")
        if res == "":
          continue
        else:
          res = int(res)
          deletePortMapping(ip, port, mappings[res]["NewInternalClient"], mappings[res]["NewExternalPort"], mappings[res]["NewProtocol"])
      else:
        print "No existing mappings found."
    else:
      gch = fetchGch(ip)
      if len(gch) > 4 and gch[1:5] == "ajax":
        nodes = parseGch(gch)
        if len(nodes) > 0:
          printNodes(nodes)
          res = raw_input("Choose a node (0): ")
          selection = "0" if res == "" else res
          res = raw_input("Choose an internal port (80): ")
          internal_port = "80" if res == "" else res
          res = raw_input("Choose an external port (" + str(int(internal_port)+10000) + "): ")
          external_port = str(int(internal_port)+10000) if res == "" else res
          # try to add mapping
          target = nodes[int(selection)]["IPAddress"]
          res = addPortMapping(ip, port, target, internal_port, external_port)
          if res["success"]:
            print "Added Mapping",ip,":",external_port,"==>",target,":",internal_port
          else:
            print "Failed to add mapping",res["response"]
        else:
          print "No nodes found."
      else:
        print "Failed to download GCH"
except KeyboardInterrupt:
  print "\nCTRL+C pressed. Exiting..."
  exit(0)
