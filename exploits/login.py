from requests import session
import re
from time import sleep
import httplib

credentials = [("user","user"), ("admin","admin"), ("avanzado","avanzado"), ("root","public"), ("root","5gemh298n"), ("admin","zteh298n"), ("admin","5v5z5"), ("","zte")]

def getDMZPayload(enable, targetIP, wanName, token):
  return {
    'ViewName':'NULL',
    'Enable': 1 if enable else 0,
    'WANCViewName': wanName,
    'WANCName': 'WAN-DHCP-Connection',
    'InternalHost': targetIP,
    'DevUniqueNum': 'NULL',
    'InternalMacHost': 'NULL',
    'MacEnable': 0,
    'IF_ACTION': 'apply',
    'IF_ERRORSTR': 'SUCC',
    'IF_ERRORPARAM': 'SUCC',
    'IF_ERRORTYPE': -1,
    '_SESSION_TOKEN': token
  }

def getUPnPPayload(enable, wanName, token):
  return {
    'EnableUPnPIGD': 1 if enable else 0,
    'WanName': wanName,
    'LanName': 'NULL',
    'ADPeriod': 30,
    'TTL': 4,
    'IF_ACTION': 'apply',
    'IF_ERRORSTR': 'SUCC',
    'IF_ERRORPARAM': 'SUCC',
    'IF_ERRORTYPE': -1,
    '_SESSION_TOKEN': token
  }

def getLogonPayload(username, password, token):
  return {
    'action': 'login',
    'Username': username,
    'Password': password,
    'Frm_Logintoken' : token
  }

def getLogintoken(ip):
  loginToken = None

  conn = httplib.HTTPConnection(ip, 80)
  conn.request("GET", "/")
  resp = conn.getresponse()
  html = resp.read()

  # getObj("Frm_Logintoken").value = "29";
  token = re.findall('getObj\("Frm_Logintoken"\).value = "([0-9]+)"', html)
  if len(token) > 0:
    loginToken = token[0]
  return loginToken

def getCredentials():
  username = raw_input("Username: ")
  password = raw_input("Password: ")
  return [(username, password)]

def getSessionToken(html):
  tok = re.findall('var session_token = "([0-9]+)"', html)
  return tok[0] if len(tok) > 0 else None

def getWanName(html):
  tok = re.findall('<option value="([^"]*)"', html)
  return tok[0] if len(tok) > 0 else None

def getTargetIP(html):
  tok = re.findall("Transfer_meaning\('InternalHost','([^']+)", html)
  return tok[0].replace("\\x2e", ".") if len(tok) > 0 else None

def printMenu(options, default=0):
  for i in range(0, len(options)):
    print str(i+1) + ".\t" + options[i]
  print "CTRL+C to exit"
  return raw_input('Choose an option [' + str(default+1) + ']: ')

def cleanUnicode(html):
  return html.encode('ascii', 'ignore').decode('ascii')

UPNP_FORM = '/getpage.gch?pid=1002&nextpage=app_upnp_conf_t.gch'
DMZ_FORM = '/getpage.gch?pid=1002&nextpage=app_dmz_conf_t.gch'

CREDENTIALS = [("user","user"), ("admin","admin"), ("avanzado","avanzado"), ("root","public"), ("root","5gemh298n"), ("admin","zteh298n"), ("admin","5v5z5"), ("","zte")]


menu = {}
menu["main"] = ["Configure a DMZ host", "Configure uPnP"]
menu["dmz"] = ["Disable DMZ", "Add/Modify DMZ Host"]
menu["upnp"] = ["Enable uPnP", "Disable uPnP"]

try:
  ip = raw_input("Enter IP: ")
  if ip == "":
    ip = "192.168.1.1"
  if ip.startswith("http://") and ip[-1] == "/":
    ip = ip[7:-1] # trim leading http and final /

  with session() as c:
    resp = None
    opt = raw_input("Do you know the credentials? (Y/N): ")
    # let user enter credentials if known
    creds = CREDENTIALS if opt == "N" else getCredentials()
    for cred in creds:
      username, password = cred
      resp = c.post('http://' + ip, data=getLogonPayload(username, password, getLogintoken(ip)))
      if 10000 < int(resp.headers['Content-Length']):
        print "Login successful... (" + username + ":" + password + ")"
        break
      else:
        print "Login failed (" + username + ":" + password + "), sleeping 30 seconds..."
        resp = None
        sleep(30)
        #TODO: die here if this was the last try...
    while resp is not None:
      # TODO: make this nicer, functions inside array etc
      opt = printMenu(menu["main"])
      # DMZ stuff
      if opt != '2':
        resp = c.get('http://' + ip + DMZ_FORM)
        cleaned = cleanUnicode(resp.text)
        #with open(ip + ".txt", "w") as f:
        #  f.write(cleaned)
        # extract info from html
        targetIP = getTargetIP(cleaned)
        sessionToken = getSessionToken(cleaned)
        wanName = getWanName(cleaned)
        # ...
        opt = printMenu(menu["dmz"])
        enableDMZ = False
        if opt == "2":
          targetIP = raw_input('Enter IP of DMZ host: ')
          enableDMZ = True
        resp = c.post('http://' + ip + DMZ_FORM, data=getDMZPayload(enableDMZ, targetIP, wanName, sessionToken))
      # UPNP stuff
      else:
        resp = c.get('http://' + ip + UPNP_FORM)
        cleaned = cleanUnicode(resp.text)
        # extract info from the html
        sessionToken = getSessionToken(cleaned)
        wanName = getWanName(cleaned)
        # show the options
        opt = printMenu(menu["upnp"])
        # default to enable
        enableUPnP = False if opt == "2" else True
        print "Attempting to " + ("enable " if enableUPnP else "disable ") + "uPnP on target."
        resp = c.post('http://' + ip + UPNP_FORM, data=getUPnPPayload(enableUPnP, wanName, sessionToken))
      if resp.status_code == 200:
        print "Success!"
      else:
        print "Failed :-("
except KeyboardInterrupt:
  print "\nCTRL+C detected, exitting..."
  exit
except:
  raise
